{
  "name": "com.unity.entities",
  "displayName": "Entities",
  "version": "1.4.0-pre.4",
  "unity": "2022.3",
  "unityRelease": "20f1",
  "dependencies": {
    "com.unity.burst": "1.8.21",
    "com.unity.collections": "2.6.0-pre.4",
    "com.unity.mathematics": "1.3.2",
    "com.unity.nuget.mono-cecil": "1.11.5",
    "com.unity.profiling.core": "1.0.2",
    "com.unity.scriptablebuildpipeline": "1.21.25",
    "com.unity.serialization": "3.1.2",
    "com.unity.test-framework.performance": "3.0.3",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.physics": "1.0.0",
    "com.unity.modules.uielements": "1.0.0",
    "com.unity.modules.unityanalytics": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0"
  },
  "description": "The Entities package provides a modern Entity Component System (ECS) implementation with a basic set of systems and components made for Unity.",
  "keywords": [
    "entities",
    "dots",
    "unity"
  ],
  "_upm": {
    "changelog": "### Added\n\n* Manual documentation for UnityObjectRef.\n* RemoteContentCatalogBuildUtility.PublishContent  will now create content sets for all objects and scenes, using the UntypedWeakReferenceId.ToString() as the name of the set.  This allows for downloading dependencies of specific objects and scenes.  For SubScenes, the content set is named with just the guid and contains the header, all entity section files, and any unity object references in content archives.\n* RemoteContentCatalogBuildUtility.PublishContent will now create a text file containing all remapping information.  This file will be created in the root of the remote content folder and is named DebugCatalog.txt.  This file shows how each file is remapped to its cache location and what its RemoteContentId is.  It also lists all content sets defined during the Publish step.\n\n### Changed\n\n* Instantiating an entity that doesn't have a LinkedEntityGroup will now behave the same as if the entity had a LinkedEntityGroup only containing the entity itself. It practice, it means that if the entity has components referencing the entity itself, those same components on the instances of that entity will always reference themselves. Previously, this only happened when an LinkedEntityGroup was present and it would leave the reference pointing to the original entity otherwise. That behavior was inconsistent and surprising.\n* EntityReferences, BlobReferences and UnityObjectReferences that are below the max search depth will be ignored. If they should not be ignored `ForceReferenceAttribute` should be added to the type.\n\n### Fixed\n\n* Addressed a potential use after free when blob assets are recreated with identical content in open subscenes (live baking). This error only affected the editor and was a potential crash.\n* Removed two sources of internal compilation errors related to the use of invalid generic parameters in SystemAPI.Query. Only the regular C# errors will be reported.\n* RuntimeContentManager.WaitForCompletion in play mode in the editor now works.\n* Fixed issue where a base system class may not update correctly if a derived system is also present.\n* Content delivery initialization will now always download the content set named \"local_catalogs\", defined in ContentDeliveryGlobalState.kLocalCatalogsContentSet.  During the publish process, all .bin files are added to this content set.  This is done to ensure that all necessary local catalog files are downloaded before initialization ends.  The files that will end up in this set are ContentArchives/archive_dependencies.bin and EntityScenes/scene_info.bin.\n* Improved burstability of BlobAssetComputationContext. (Thanks tertle!)\n* Further reduced reflection on TypeManager startup.\n* Scheduling a job in Runtime from a method invocation will no longer throw `Exception: This method should have been replaced by source gen.`\n* \"BadImageFormatException: Expected reference type but got type kind 17\" no longer happens when you have a generic ISystem MyISystem and then T and/or the RegisterGenericSystem declaration are not in the same assembly as MyISystem.\n* Assemblies that have no systems defined, but do have `[assembly: RegisterGenericSystemType()]` calls are no longer skipped, and the systems are registered.\n* Compilation will not fail in ILPostProcessing when you have a shared component with bool System.IEquatable<YourSharedComponent>.Equals(YourSharedComponent other) rather than bool Equals(YourSharedComponent other).\n* TypeManager.IsZeroSized will now correctly be true for component data that only has static fields.\n* When having a UnityObjectReference, a BlobReference and a EntityReference, the UnityObjectReference would be ignored through a faulty early-out.\n\n### Security"
  },
  "upmCi": {
    "footprint": "722bba36956e8a72da8388dbc11a4a5b33df9a0d"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.entities@1.4/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
    "type": "git",
    "revision": "266ff518fda4c414e7e3f86e546afaba5f1046c3"
  },
  "_fingerprint": "af0854c29c20f8f0be2e428065900199abc16cce"
}
